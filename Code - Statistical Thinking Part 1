import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
sns.set()

"""example data sets"""
versicolor_petal_length = [ 4.7,  4.5,  4.9,  4.,   4.6,  4.5,  4.7,  3.3,  4.6,  3.9,  3.5,  4.2,  4.,   4.7,  3.6,
  4.4,  4.5,  4.1,  4.5,  3.9,  4.8,  4.,   4.9,  4.7,  4.3,  4.4,  4.8,  5.,   4.5,  3.5,
  3.8,  3.7,  3.9,  5.1,  4.5,  4.5,  4.7,  4.4,  4.1,  4.,   4.4,  4.6,  4.,   3.3,  4.2,
  4.2,  4.2,  4.3,  3.,   4.1]
setosa_petal_length = [ 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2,
  1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1., 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6,
  1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.5, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9,
  1.4, 1.6, 1.4, 1.5, 1.4]
virginica_petal_length = [ 6.,   5.1,  5.9,  5.6,  5.8,  6.6,  4.5,  6.3,  5.8,  6.1,  5.1,  5.3,  5.5,  5.,   5.1,
  5.3,  5.5,  6.7,  6.9,  5.,   5.7,  4.9,  6.7,  4.9,  5.7,  6.,   4.8,  4.9,  5.6,  5.8,
  6.1,  6.4,  5.6,  5.1,  5.6,  6.1,  5.6,  5.5,  4.8,  5.4,  5.6,  5.1,  5.1,  5.9,  5.7,
  5.2,  5.,   5.2,  5.4,  5.1]
  

"""creating an ECDF function"""
def ecdf(data):
        """Compute ECDF for a one-dimensional array of measurements."""
        # Number of data points: n
        n = len(data)
        # x-data for ECDF: x
        x = np.sort(data)
        # y-data for ECDF: y
        y = np.arange(1, n+1)/n
        return x,y
  

"""Compute ECDF for versicolor data: x_vers, y_vers"""
x_vers, y_vers = ecdf(versicolor_petal_length)  # unpack versicolor_petal_length
plt.plot(x_vers, y_vers, marker='.', linestyle='none')
plt.margins(0.02)
plt.xlabel('length of versicolor petal')
plt.ylabel('ECDF')
plt.show()


"""comparing ECDFs by stacking them"""
# Compute ECDFs
x_set, y_set = ecdf(setosa_petal_length)
x_vers, y_vers = ecdf(versicolor_petal_length)
x_virg, y_virg = ecdf(virginica_petal_length)

# Plot all ECDFs on the same plot
_ = plt.plot(x_set, y_set, marker='.', linestyle='none')
_ = plt.plot(x_vers, y_vers, marker='.', linestyle='none')
_ = plt.plot(x_virg, y_virg, marker='.', linestyle='none')

# Set margins, Annotate the plot and display
plt.margins(0.02)
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')
plt.show()

# compute percentiles
percentiles = np.array([2.5, 25, 50, 75, 97.5]) # define which percentiles I want
ptiles_vers = np.percentile(versicolor_petal_length, percentiles) #calculate percentiles of data
print (ptiles_vers)

#overlay the percentiles on the ecdf graph above
_ = plt.plot(x_vers, y_vers, '.') # plot ecdf
plt.margins(0.02) # set margins
_ = plt.xlabel('petal length (cm)') # label axes
_ = plt.ylabel('ECDF')
_ = plt.plot(ptiles_vers, percentiles/100, marker='D', color='red', linestyle='none') # plot percentiles
plt.show()

# box plot
# _ = sns.boxplot(x='x data', y='y data', data=df)

#scatter plot
# - = plt.plot(total_votes/100, dem_share, markers='.', linestyle='none')

# pearson correlation coefficient
def pearson_r(x, y):
    corr_matrix = np.corrcoef(x,y)
    return corr_matrix[0,1]

# pseudo random number between 0,1 generation using seeds
np.random.seed(10)
random_numbers = np.random.random(size=4)
print (random_numbers)


"""create a function that performs Bernoulli trials"""
#based on n observations and p success rate, returns success rate
def bernoulli_trials_func(n,p):
    n_successes = 0
    for i in range(n):
        random_num = np.random.random()
        if random_num > p:
            n_successes += 1
    return n_successes

bernoulli_trials_func(100, .5)

# using bernoulli_trials function to simulate the number of defaults a bank would face
# number of loans: 100
# default rate of 5%
# number of trials: 1000
np.random.seed(42)
n_defaults = np.empty(1000)
for i in range(1000):
    n_defaults[i] = bernoulli_trials_func(100, 0.05)
_ = plt.hist(n_defaults, normed=True)
_ = plt.xlabel('number of defaults out of 100 loans')
_ = plt.ylabel('probability')
plt.show()

# consider: if a bank faces 10 or more defaults, then it will lose money. what is the probability of this occuring?
# ecdf:
x,y = ecdf(n_defaults)
_ = plt.plot(x,y, marker='.', linestyle='none')
_ = plt.xlabel('number of defaults')
_ = plt.ylabel('ECDF')
plt.show()
n_lose_money = np.sum(n_defaults >= 10)
print('Probability of losing money =', n_lose_money / len(n_defaults))


"""Sampling with binomial distribution"""
# Take 10,000 samples out of the binomial distribution: n_defaults
n_defaults = np.random.binomial(n=100, p=0.05, size=10000)
# Compute CDF: x, y
x,y = ecdf(n_defaults)
# Plot the CDF with axis labels
_ = plt.plot(x,y, marker='.', linestyle='none')
_ = plt.xlabel('number of defaults')
_ = plt.ylabel('ECDF')
# Show the plot
plt.show()

"""plot the Binomial PMF using bar graphs"""
# Compute bin edges: bins
bins = np.arange(0, max(n_defaults) + 1.5) - 0.5
# Generate histogram
_ = plt.hist(n_defaults, normed=True, bins=bins)
# Set margins
_ = plt.margins(0.02)
# Label axes
_ = plt.xlabel('number of defaults')
_ = plt.ylabel('probability')
# Show the plot
plt.show()

"""relationships between Binomial and Poisson distributions"""
# Draw 10,000 samples out of Poisson distribution: samples_poisson
samples_poisson = np.random.poisson(lam=10, size=10000)

# Print the mean and standard deviation
print('Poisson:     mean=', np.mean(samples_poisson), 'std=', np.std(samples_poisson))

# Specify values of n and p to consider for Binomial: n, p
n = [20, 100, 1000]
p = [0.5, 0.1, 0.01]

# Draw 10,000 samples for each n,p pair: samples_binomial
for i in range(3):
    samples_binomial = np.random.binomial(n=n[i], p=p[i], size=10000)
    # Print results
    print('n =', n[i], 'Binom:   mean=', np.mean(samples_binomial), 'std=', np.std(samples_binomial))
print ('note: the means are similar, but the std dev of the binomial distribution gets close to that of the Poisson distribution as the the probability of p gets lower')


"""no-hitters poisson distribution"""
# The years 1990 and 2015 had the most no-hitters ever: 7
# The average # of no-hitters per season is (251/115), approx 2.183
# What is the probability of having 7 or more no-hitters in a season?
# Draw 10,000 samples out of Poisson distribution: n_nohitters

n_nohitters = np.random.poisson(lam=251/115, size=10000)

# Compute number of samples that are seven or greater: n_large
n_large = np.sum(n_nohitters>=7)

# Compute probability of getting seven or more: p_large
p_large= n_large/10000

# Print the result
print('Probability of seven or more no-hitters:', p_large)

# compute number of samples that are two or greater: n_avg
n_avg = np.sum(n_nohitters >=2)
p_avg = n_avg/10000
print ('Probability of two or more no-hitters:', p_avg)
